from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import requests
from datetime import datetime
import time
import random
from urllib.parse import unquote
from identify_atack import check_request
import psutil
import json
from pydantic import BaseModel
from typing import Optional

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI()

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
# –ö–ª–∞—Å—Å –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ POST-–∑–∞–ø—Ä–æ—Å
class PredictionData(BaseModel):
    prediction: str

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
latest_prediction: Optional[str] = None
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
request_logs = []
suspect_log = []
request_time = []
anomalies = []
users_online_history = []
prediction_online = []
def log_request(req: Request):
    now = datetime.now().strftime("%d/%b/%Y %H:%M:%S")
    log_entry = f"{req.client.host} - - [{now}] \"{req.method} {req.url.path}?{req.url.query} HTTP/1.1\" 200"
    print(log_entry)
    request_logs.append(log_entry)

    # –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª
    with open('/Users/aydyn/Desktop/diplom/web_service/logs.txt', 'a') as f:
        f.write(f'{log_entry}\n')

    # –ü—Ä–æ—Ö–æ–¥ –ø–æ —Å–ø–∏—Å–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ URL-—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for log in request_logs:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ª–æ–≥
        decoded_log = unquote(log)

        # –ò—â–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é "symbol=" –∏ –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é "HTTP/1.1"
        symbol_start = decoded_log.find('symbol=') + len('symbol=')
        http_start = decoded_log.find(' HTTP/1.1')

        # –ï—Å–ª–∏ –æ–±–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã, –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
        if symbol_start != -1 and http_start != -1:
            symbol_value = decoded_log[symbol_start:http_start]

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ suspect_log
            attack_type = check_request(symbol_value)
            print(attack_type)
            if attack_type != "normal_request":
                if (decoded_log + f' üíâ Type of attack: {attack_type} üíâ') not in suspect_log:
                    suspect_log.append(decoded_log + f' üíâ Type of attack: {attack_type} üíâ')
                    with open('/Users/aydyn/Desktop/diplom/web_service/suspect_logs/suspect_logs.txt', 'a') as f:
                        f.write(f'{decoded_log}\n')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
@app.get("/api/cryptos")
async def get_cryptos(request: Request, symbol: str = None):
    start_time = time.time()
    log_request(request)  # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å

    if symbol:
        response = requests.get('https://api.coingecko.com/api/v3/coins/markets', params={
            'vs_currency': 'usd',
            'symbols': symbol.lower()
        })
        cryptos = response.json()
        end_time = time.time()
        request_time.append(round(end_time - start_time, 2))

        if cryptos:
            return JSONResponse(content=cryptos[0])
        else:
            return JSONResponse(content={"error": "Cryptocurrency not found"}, status_code=404)
    else:
        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-20 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        response = requests.get('https://api.coingecko.com/api/v3/coins/markets', params={
            'vs_currency': 'usd',
            'order': 'market_cap_desc',
            'per_page': 20,
            'page': 1
        })
        end_time = time.time()
        request_time.append(round(end_time - start_time, 2))
        return JSONResponse(content=response.json())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
@app.get("/api/logs")
async def get_logs():
    return JSONResponse(content=request_logs)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
@app.delete("/api/logs")
async def delete_logs():
    request_logs.clear()
    return JSONResponse(content={"message": "All logs have been deleted"})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
@app.get("/api/suspectlogs")
async def get_suspect():
    return JSONResponse(content=suspect_log)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞
@app.get("/api/time-response")
async def get_time():
    return JSONResponse(content=request_time)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
def generate_chart_data():
    now = datetime.now()
    data = {
        "time": now.strftime("%H:%M:%S"),
        "value": random.randint(500, 1000)
    }
    return data

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
@app.get("/api/chart-data")
async def chart_data():
    data = generate_chart_data()
    return JSONResponse(content=data)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–µ CPU
@app.get("/api/cpu")
async def get_cpu_data():
    cpu_usage = psutil.cpu_percent(interval=1)
    timestamp = datetime.now().strftime('%H:%M:%S')
    data = {
        'cpu_usage': [cpu_usage],
        'timestamps': [timestamp]
    }
    csv_line = f"{cpu_usage}, {timestamp}\n"
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É CSV
    with open('/Users/aydyn/Desktop/diplom/web_service/cpu_data.txt', 'a') as f:
        f.write(csv_line)
    return JSONResponse(content=data)


@app.post("/api/cpu_anomalies")
async def receive_anomalies(request: Request):
    data = await request.json()
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –¥—Ä—É–≥—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö

    anomalies.extend(data)

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ `anomalies` –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    return JSONResponse({"message": "Anomalies received successfully."})
@app.get("/api/cpu_anomalies")
async def get_anomalies():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
    return JSONResponse(content=anomalies)


@app.get("/api/users-online")
async def get_users_online():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
    current_time = datetime.now().strftime("%H:%M")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
    users_online = random.randint(1, 1000)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
    data = {
        "time": current_time,
        "users_online": users_online
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
    users_online_history.append(data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    with open("/Users/aydyn/Desktop/diplom/web_service/online_users.txt", 'a') as file:
        file.write(f"{current_time}, {users_online}\n")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
    return JSONResponse(content=data)


@app.get("/api/users-online-history")
async def get_users_online_history():
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return JSONResponse(content=users_online_history)


@app.post("/api/prediction_online")
async def receive_prediction(data: PredictionData):
    global latest_prediction
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö POST-–∑–∞–ø—Ä–æ—Å–∞
    latest_prediction = data.prediction

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open("predictions.txt", "a") as file:
        file.write(f"{data.prediction}\n")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ
    return {"message": "Prediction received successfully."}


@app.get("/api/prediction_online")
async def get_latest_prediction():
    global latest_prediction
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    if latest_prediction is not None:
        return {"latest_prediction": latest_prediction}
    else:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–µ–Ω–æ
        raise HTTPException(status_code=404, detail="No prediction available.")


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
    import uvicorn
    uvicorn.run(app, host="localhost", port=5000)
